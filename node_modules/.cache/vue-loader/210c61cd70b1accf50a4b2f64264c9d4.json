{"remainingRequest":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/src/views/curso/Tema1.vue?vue&type=template&id=7be8f9ef&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/src/views/curso/Tema1.vue","mtime":1756050436200},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gRGVyZWNob3MgcmVhbGVzJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIGRpdihkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIHAgTG9zIGRlcmVjaG9zIHJlYWxlcyBzb24gdW5hIGNhdGVnb3LDrWEgY2VudHJhbCBlbiBlbCBkZXJlY2hvIGNpdmlsLiBPdG9yZ2FuIGEgdW5hIHBlcnNvbmEgbGEgZmFjdWx0YWQgZGUgZWplcmNlciB1biBwb2RlciBkaXJlY3RvIHNvYnJlIHVuIGJpZW4sIHBlcm1pdGnDqW5kb2xlIHVzYXJsbywgZGlzZnJ1dGFybG8gbyBkaXNwb25lciBkZSDDqWwgc2luIGRlcGVuZGVyIGRlIHRlcmNlcm9zLiBFc3RlIHbDrW5jdWxvIGVudHJlIGVsIHN1amV0byB5IGVsIGJpZW4gZXMgZGlyZWN0byB5IG9wb25pYmxlIGZyZW50ZSBhIGN1YWxxdWllciBwZXJzb25hLCBsbyBxdWUgZ2FyYW50aXphIHN1IHByb3RlY2Npw7NuIGxlZ2FsLgoKICAgICAgcC5tYi01IEVsIHTDqXJtaW5vIHJlYWwgZGVyaXZhIGRlbCBsYXTDrW4gcmVzIChjb3NhKSwgeSBlc3RvcyBkZXJlY2hvcyBzZSBhcGxpY2FuIHRhbnRvIGEgYmllbmVzIG1hdGVyaWFsZXMgY29tbyBpbm1hdGVyaWFsZXMuIEVudHJlIHN1cyBjYXJhY3RlcsOtc3RpY2FzIGRlc3RhY2FuOgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgLnJvdy5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5tYi0zCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IE9wb25pYmlsaWRhZCB1bml2ZXJzYWwKICAgICAgICAgICAgICBwIFRvZG9zIGRlYmVuIHJlc3BldGFyIGVsIGRlcmVjaG8gZGVsIHRpdHVsYXIgc29icmUgZWwgYmllbi4gPGI+RWplbXBsbzo8L2I+IHVuIHByb3BpZXRhcmlvIHB1ZWRlIGltcGVkaXIgbGEgb2N1cGFjacOzbiBubyBhdXRvcml6YWRhIGRlIHN1IHByb3BpZWRhZC4KICAgICAgICAgIC5yb3cucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUubWItMwogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBEZXJlY2hvIGRlIHBlcnNlY3VjacOzbgogICAgICAgICAgICAgIHAgRWwgdGl0dWxhciBwdWVkZSByZWNsYW1hciBlbCBiaWVuIGRvbmRlIHNlYSBxdWUgZXN0w6ksIGluY2x1c28gc2kgaGEgc2lkbyB0cmFuc2ZlcmlkbyBhIHRlcmNlcm9zLgogICAgICAgICAgLnJvdy5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5tYi0zCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8zLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IFRpcGljaWRhZAogICAgICAgICAgICAgIHAgU29sbyBleGlzdGVuIGxvcyBkZXJlY2hvcyByZWFsZXMgZXN0YWJsZWNpZG9zIGVuIGxhIExleSwgc2luIHBvc2liaWxpZGFkIGRlIGNyZWFyIG90cm9zIGRpZmVyZW50ZXMuCiAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgUHJvcGllZGFkCgogICAgcC5tYi01IExhIHByb3BpZWRhZCBlcyBlbCBkZXJlY2hvIHJlYWwgbcOhcyBhbXBsaW8geSBjb21wcmVuZGUgbGFzIGZhY3VsdGFkZXMgZGUgdXNvLCBnb2NlIHkgZGlzcG9zaWNpw7NuIGRlbCBiaWVuLiBFbCBwcm9waWV0YXJpbyBwdWVkZSBkaXNmcnV0YXIgZGUgc3VzIGJlbmVmaWNpb3MsIGNvbW8gcmVudGFzIG8gdXRpbGlkYWRlcywgeSB0cmFuc2ZlcmlybG8sIHNlZ8O6biBzdSB2b2x1bnRhZCwgc2llbXByZSBzdWpldG8gYSBsb3MgbMOtbWl0ZXMgbGVnYWxlcy4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby0xCiAgICAgIC5weC00LnB4LWxnLTUucGItbWQtMwogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgUG9zZXNpw7NuCgogICAgICAgIHAubWItNSBMYSBwb3Nlc2nDs24gaW1wbGljYSBsYSB0ZW5lbmNpYSBkZSB1biBiaWVuIGNvbiDDoW5pbW8gZGUgc2XDsW9yIHkgZHVlw7FvLCBhdW5xdWUgbm8gc2llbXByZSBzZSBjdWVudGUgY29uIHVuIHTDrXR1bG8gZGUgcHJvcGllZGFkLiBFcyB1bmEgc2l0dWFjacOzbiBkZSBoZWNobyBxdWUgcHVlZGUgZ2VuZXJhciBlZmVjdG9zIGp1csOtZGljb3MsIGNvbW8gbGEgcHJlc2NyaXBjacOzbiBhZHF1aXNpdGl2YSwgc2kgc2UgY3VtcGxlbiBsb3MgcmVxdWlzaXRvcyBsZWdhbGVzLgogICAgICAgIAogICAgICAgIHAubWItNS50ZXh0LWJvbGQgT3Ryb3MgZGVyZWNob3MgcmVhbGVzIHNvbjogCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvNC5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIFVzdWZydWN0bwogICAgICAgICAgICAgICAgcC5tYi0wIFBlcm1pdGUgYSBhbGd1aWVuIHVzYXIgeSBkaXNmcnV0YXIgZGUgdW4gYmllbiBhamVubyByZXNwZXRhbmRvIHN1IGVzZW5jaWEuIFBvciBlamVtcGxvLCB2aXZpciBlbiB1bmEgY2FzYSBxdWUgcGVydGVuZWNlIGEgb3RyYSBwZXJzb25hLCBiYWpvIHVuIGNvbnRyYXRvIGRlIHVzdWZydWN0by4KICAgICAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS81LnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgU2VydmlkdW1icmVzCiAgICAgICAgICAgICAgICBwLm1iLTAgRGVyZWNob3MgcXVlIGJlbmVmaWNpYW4gYSB1biBiaWVuIGEgY29zdGEgZGUgb3RybywgY29tbyBlbCBkZXJlY2hvIGRlIHBhc28gcG9yIHVuIHRlcnJlbm8sIHBhcmEgYWNjZWRlciBhIHVuYSB2w61hIHDDumJsaWNhLgogICAgCiAgICAuYmctY29sb3ItMi5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgIC5jb2wtbGcucC00LnB4LTUubWItMwogICAgICAgICAgcC5tYi0wIEVzdG9zIGRlcmVjaG9zIHNvbiBmdW5kYW1lbnRhbGVzIHBhcmEgZ2FyYW50aXphciBsYSBlc3RhYmlsaWRhZCB5IHNlZ3VyaWRhZCBqdXLDrWRpY2EgZW4gbGFzIHJlbGFjaW9uZXMgcGF0cmltb25pYWxlcywgcHJvbW92aWVuZG8gZWwgZGVzYXJyb2xsbyBzb2NpYWwgeSBlY29uw7NtaWNvIGFsIGFzZWd1cmFyIGVsIHVzbywgZGlzZnJ1dGUgeSB0cmFuc2ZlcmVuY2lhIGRlIGJpZW5lcywgZGUgZm9ybWEgcmVndWxhZGEuCiAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvNi5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAKCiAgICAjdF8xXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4xXSBQcm9waWVkYWQgeSBwb3Nlc2nDs24KICAgIAogICAgcC5tYi01IExhIHByb3BpZWRhZCB5IGxhIHBvc2VzacOzbiBzb24gZmlndXJhcyBlc2VuY2lhbGVzIGVuIGVsIGRlcmVjaG8gY2l2aWwsIHF1ZSByZWd1bGFuIGxhIHJlbGFjacOzbiBlbnRyZSBwZXJzb25hcyB5IGJpZW5lcywgZ2FyYW50aXphbmRvIGVsIG9yZGVuIHkgbGEgc2VndXJpZGFkIGp1csOtZGljYS4KCiAgICBUYWJzQy5jb2xvci1wcmltYXJpby5tYi01CiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJQcm9waWVkYWQiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtNC5zdmcnKSIgKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IFByb3BpZWRhZAogICAgICAgICAgICBwIFNlZ8O6biBlbCBBcnTDrWN1bG8gNjY5IGRlbCBDw7NkaWdvIENpdmlsIENvbG9tYmlhbm8sIGxhIHByb3BpZWRhZCBjb25maWVyZSBhbCB0aXR1bGFyIGVsIHBvZGVyIGRlIHVzYXIsIGdvemFyIHkgZGlzcG9uZXIgZGUgdW4gYmllbiwgc2llbXByZSBxdWUgc2UgcmVzcGV0ZSBsYSBsZXkgeSBsb3MgZGVyZWNob3MgZGUgdGVyY2Vyb3MuIEVzdGUgZGVyZWNobyBlcyBjb21wbGV0byB5IGV4Y2x1c2l2bywgcGVybyBsaW1pdGFkbyBwb3Igbm9ybWFzIGNvbW8gZWwgaW50ZXLDqXMgcMO6YmxpY28geSBsYXMgcmVzdHJpY2Npb25lcyBsZWdhbGVzLgogICAgICAgIAogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEubWItMwogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzcucG5nJywgYWx0PScnKQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iUG9zZXNpw7NuIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy9pY29uLXRhYi1jLTQuc3ZnJykiICkKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBQb3Nlc2nDs24KICAgICAgICAgICAgcCBEZWZpbmlkYSBlbiBlbCBBcnTDrWN1bG8gNzYyIGRlbCBDw7NkaWdvIENpdmlsLCBsYSBwb3Nlc2nDs24gaW1wbGljYSBsYSB0ZW5lbmNpYSBkZSB1biBiaWVuIGNvbiBpbnRlbmNpw7NuIGRlIGFjdHVhciBjb21vIHN1IGR1ZcOxbywgYXVucXVlIG5vIG5lY2VzYXJpYW1lbnRlIHNlIGN1ZW50ZSBjb24gdMOtdHVsbyBsZWdhbC4gTGEgcG9zZXNpw7NuIHB1ZWRlIGRhciBsdWdhciBhIGxhIGFkcXVpc2ljacOzbiBkZSBsYSBwcm9waWVkYWQgbWVkaWFudGUgcHJlc2NyaXBjacOzbiBhZHF1aXNpdGl2YSwgc2llbXByZSBxdWUgc2UgY3VtcGxhbiBjaWVydG9zIHJlcXVpc2l0b3MgbGVnYWxlcywgY29tbyBlbCB0aWVtcG8gZGUgcG9zZXNpw7NuIGNvbnRpbnVhIHkgbGEgYXVzZW5jaWEgZGUgb3Bvc2ljacOzbiBwb3IgcGFydGUgZGUgdGVyY2Vyb3MuCiAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQub3JkZXItMS5tYi0zCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvOC5wbmcnLCBhbHQ9JycpCiAgICAKICAgIHAubWItNSBBbWJhcyBmaWd1cmFzIHNvbiBlc2VuY2lhbGVzIHBhcmEgZ2FyYW50aXphciBsYSBjb252aXZlbmNpYSB5IGxhIHNlZ3VyaWRhZCBlbiBsYXMgdHJhbnNhY2Npb25lcyBwYXRyaW1vbmlhbGVzLCBhc2VndXJhbmRvIHF1ZSBsb3MgZGVyZWNob3MgZGUgdXNvIHkgZGlzZnJ1dGUgZGUgbG9zIGJpZW5lcywgc2UgZWplcnphbiBkZW50cm8gZGVsIG1hcmNvIG5vcm1hdGl2byBlc3RhYmxlY2lkby4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0zLm1iLTUKICAgICAgLnB4LTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBFdm9sdWNpw7NuIGRlbCBjb25jZXB0byBkZSBwcm9waWVkYWQgeSBwb3Nlc2nDs24KICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgU2UgaW52aXRhIGEgcmVmbGV4aW9uYXIgc29icmUgbGEgZXZvbHVjacOzbiBoaXN0w7NyaWNhIHkgY29udGVtcG9yw6FuZWEgZGUgbG9zIGNvbmNlcHRvcyBkZSBwcm9waWVkYWQgeSBwb3Nlc2nDs24sIGRlc2RlIHN1IG9yaWdlbiBjb2xlY3Rpdm8gZW4gbGFzIHByaW1lcmFzIGNpdmlsaXphY2lvbmVzLCBoYXN0YSBzdSByZWNvbm9jaW1pZW50byBjb21vIGRlcmVjaG9zIGluZGl2aWR1YWxlcyBmdW5kYW1lbnRhbGVzLCBlbiBsYSBtb2Rlcm5pZGFkLgoKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b18xLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBFdm9sdWNpw7NuIGRlbCBjb25jZXB0byBkZSBwcm9waWVkYWQgeSBwb3Nlc2nDs24KCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS85LnBuZycsIGFsdD0nJykKCiAgICAjdF8xXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4yXSBQb3Nlc2nDs24geSBwcm9waWVkYWQgaW5tdWVibGU6IHVuYSByZWxhY2nDs24gY29tcGxlamEgeSBuZWNlc2FyaWEKCiAgICBwLm1iLTUgTGEgcG9zZXNpw7NuIHkgbGEgcHJvcGllZGFkLCBzb24gY29uY2VwdG9zIGVzZW5jaWFsZXMgZW4gZWwgZGVyZWNobyBjaXZpbCwgZXNwZWNpYWxtZW50ZSBlbiBlbCDDoW1iaXRvIGlubW9iaWxpYXJpby4gQXVucXVlIGVuIHRlb3LDrWEgc2UgdHJhdGEgZGUgZmlndXJhcyBkaXN0aW50YXMsIGVuIGxhIHByw6FjdGljYSBzdSByZWxhY2nDs24gZXMgdGFuIGVzdHJlY2hhIHF1ZSwgYSBtZW51ZG8sIHBhcmVjZW4gc3VwZXJwb25lcnNlLiAKCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLW1kLTguY29sLWxnLTQubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMC5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IkxhIHByb3BpZWRhZCIpCiAgICAgICAgICAgIHAgQ29tbyBkZXJlY2hvIHJlYWwgcGxlbm8sIG90b3JnYSBhbCB0aXR1bGFyIGVsIHVzbywgZ29jZSB5IGRpc3Bvc2ljacOzbiBkZSB1biBiaWVuLCBjb25zb2xpZMOhbmRvc2UgY29tbyBsYSBleHByZXNpw7NuIG3DoXMgY29tcGxldGEgZGUgY29udHJvbCBqdXLDrWRpY28gc29icmUgdW4gb2JqZXRvLiAKICAgICAgICAgIC5kaXYodGl0dWxvPSJMYSBwb3Nlc2nDs24iKQogICAgICAgICAgICBwIFNlIGRlZmluZSBjb21vIHVuYSByZWxhY2nDs24gZGUgaGVjaG8gcXVlIG5vIG5lY2VzYXJpYW1lbnRlIHJlcXVpZXJlIHVuIHTDrXR1bG8gZm9ybWFsLiBFbCBwb3NlZWRvciBhY3TDumEgY29tbyBzaSBmdWVyYSBwcm9waWV0YXJpbywgYXVucXVlIG5vIHRlbmdhIGxhIHRpdHVsYXJpZGFkIGxlZ2FsIHF1ZSByZXNwYWxkZSBzdSByZWxhY2nDs24gY29uIGVsIGJpZW4uCiAgICAKICAgIHAubWItNS5iZy1jb2xvci0xLnAtNCBBbWJhcyBmaWd1cmFzIGNvbXBhcnRlbiB1biBlamUgY29tw7puOiBlbCBkaXNmcnV0ZSBlY29uw7NtaWNvIGRlbCBiaWVuLiBTaW4gZW1iYXJnbywgbWllbnRyYXMgbGEgcHJvcGllZGFkIGdhcmFudGl6YSB1biBkZXJlY2hvIGFic29sdXRvIG9wb25pYmxlIGEgdGVyY2Vyb3MsIGxhIHBvc2VzacOzbiBwdWVkZSBzZXIgbcOhcyBsaW1pdGFkYSwgZGVwZW5kaWVuZG8gZGUgbGFzIGNpcmN1bnN0YW5jaWFzIGxlZ2FsZXMuIEFkZW3DoXMsIGxhIHBvc2VzacOzbiBubyBzb2xvIGN1bXBsZSB1bmEgZnVuY2nDs24gZWNvbsOzbWljYSBhbCBmYWNpbGl0YXIgZWwgYWNjZXNvIGEgbG9zIGJpZW5lcywgc2lubyBxdWUgdGFtYmnDqW4gc2lydmUgY29tbyBtZWNhbmlzbW8gcGFyYSByZWNvbm9jZXIgZGVyZWNob3MgZW4gY29udGV4dG9zIGRlIGluZm9ybWFsaWRhZC4gQSBjb250aW51YWNpw7NuLCBzZSBkZXRhbGxhIHN1IHJlbGFjacOzbiB5IHBhcnRpY3VsYXJpZGFkZXM6CgogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBUYWJsYSAxLiAKICAgICAgc3BhbiBQcm9waWVkYWQgeSBwb3Nlc2nDs24gCgogICAgLnRhYmxhLWEuY29sb3ItdGVyY2lhcmlvLm1iLTUoZGF0YS1hb3M9Inpvb20taW4iKSAKICAgICAgdGFibGUKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItNCBBc3BlY3RvCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTQgUHJvcGllZGFkCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTQgUG9zZXNpw7NuCiAgICAgICAgdGJvZHkKICAgICAgICAgIHRyLmJnLWNvbG9yLTUKICAgICAgICAgICAgdGQgPGI+RGVmaW5pY2nDs248L2I+CiAgICAgICAgICAgIHRkIERlcmVjaG8gcmVhbCBwbGVubyBxdWUgb3RvcmdhIGVsIHVzbywgZ29jZSB5IGRpc3Bvc2ljacOzbiBkZSB1biBiaWVuLgogICAgICAgICAgICB0ZCBSZWxhY2nDs24gZGUgaGVjaG8gc29icmUgdW4gYmllbiwgc2luIG5lY2VzaWRhZCBkZSB0w610dWxvIGZvcm1hbC4KICAgICAgICAgICAgCiAgICAgICAgICB0ci5iZy1jb2xvci01CiAgICAgICAgICAgIHRkIDxiPlByb3RlY2Npw7NuIGp1csOtZGljYTwvYj4gCiAgICAgICAgICAgIHRkIERlcmVjaG8gYWJzb2x1dG8sIG9wb25pYmxlIGEgdGVyY2Vyb3MuCiAgICAgICAgICAgIHRkIERlcmVjaG8gcmVhbCBwcm92aXNpb25hbCBwcm90ZWdpZG8gcG9yIGxhIGxleS4KICAgICAgICAgICAKICAgICAgICAgIHRyLmJnLWNvbG9yLTUKICAgICAgICAgICAgdGQgPGI+QWNjZXNvIGFsIG1lcmNhZG88L2I+CiAgICAgICAgICAgIHRkIEZhY2lsaXRhIGJlbmVmaWNpb3MgY29tbyBjcsOpZGl0b3MgZm9ybWFsZXMgeSBwYXJ0aWNpcGFjacOzbiBlbiBlbCBtZXJjYWRvIGlubW9iaWxpYXJpby4KICAgICAgICAgICAgdGQgTGltaXRhZG8gcG9yIGxhIGF1c2VuY2lhIGRlIHRpdHVsYXJpZGFkIGZvcm1hbC4KICAgICAgICAgICAgIAogICAgICAgICAgdHIuYmctY29sb3ItNQogICAgICAgICAgICB0ZCA8Yj5IZXJyYW1pZW50YSBsZWdhbDwvYj4gCiAgICAgICAgICAgIHRkIFBsZW5vIGNvbnRyb2wgbWVkaWFudGUgdMOtdHVsb3MgZGUgcHJvcGllZGFkIGluc2NyaXRvcy4KICAgICAgICAgICAgdGQgUG9zaWJpbGlkYWQgZGUgYWRxdWlyaXIgbGEgcHJvcGllZGFkIGEgdHJhdsOpcyBkZSBsYSBwcmVzY3JpcGNpw7NuIGFkcXVpc2l0aXZhICh1c3VjYXBpw7NuKS4KCiAgICBoMi5tYi01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgSGlzdG9yaWEgeSByZWd1bGFjacOzbiBkZSBsYSBwb3Nlc2nDs24geSBwcm9waWVkYWQKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy03Lm1iLTMoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKS5vcmRlci0yLm9yZGVyLWxnLTEKICAgICAgICBwIEEgY29udGludWFjacOzbiwgc2UgZXhwbG9yYSBsYSBldm9sdWNpw7NuIHkgbGEgcmVndWxhY2nDs24gZGUgZXN0b3MgY29uY2VwdG9zIGVuIGxhIHRyYWRpY2nDs24ganVyw61kaWNhLgogICAgICAgIHAgRW4gZWwgPGI+RGVyZWNobyByb21hbm88L2I+LCBzZSB0cmF6YXJvbiBsYXMgcHJpbWVyYXMgZGlzdGluY2lvbmVzIGNsYXJhcyBlbnRyZSBhbWJhcyBmaWd1cmFzLiA8Yj5MYSBwcm9waWVkYWQ8L2I+ICg8ZW0+ZG9taW5pdW08L2VtPikgZXJhIGVsIGNvbnRyb2wgYWJzb2x1dG8gc29icmUgdW4gYmllbiwgbWllbnRyYXMgcXVlIGxhIDxiPnBvc2VzacOzbjwvYj4gKDxlbT5wb3NzZXNzaW88L2VtPikgc2UgcmVjb25vY8OtYSBjb21vIHVuYSB0ZW5lbmNpYSBkZSBoZWNoby4gRXN0ZSBzaXN0ZW1hIGluZmx1ecOzIHByb2Z1bmRhbWVudGUgZW4gbGFzIGNvZGlmaWNhY2lvbmVzIGp1csOtZGljYXMgZGUgRXVyb3BhIHkgQW3DqXJpY2EgTGF0aW5hLgogICAgICAuY29sLWxnLTUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm9yZGVyLTEub3JkZXItbGctMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTEucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgIAogICAgLnJvdy5tYi01LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAuY29sLWxnLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTIucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04CiAgICAgICAgcC5tYi0wLmJnLWNvbG9yLTIucC01IEVuIEFtw6lyaWNhIExhdGluYSwgbG9zIGPDs2RpZ29zIGNpdmlsZXMgYWRvcHRhcm9uIGxhIHRyYWRpY2nDs24gcm9tYW5vLWdlcm3DoW5pY2EsIGFkYXB0w6FuZG9sYSBhIHJlYWxpZGFkZXMgbG9jYWxlcy4gRW4gcGHDrXNlcyBjb21vIENvbG9tYmlhIHkgUGVyw7osIGxhIHBvc2VzacOzbiBzZSBoYSByZWd1bGFkbyBjb21vIHVuIHBhc28gbGVnw610aW1vIGhhY2lhIGxhIHByb3BpZWRhZCBtZWRpYW50ZSBoZXJyYW1pZW50YXMgY29tbyBsYSB1c3VjYXBpw7NuLCBjb24gcmVxdWlzaXRvcyBjb21vIHBhY2lmaWNpZGFkLCBjb250aW51aWRhZCB5IHB1YmxpY2lkYWQuCiAgICAKICAgIGgyLm1iLTUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBEZXNhZsOtb3MgZGUgbGEgcG9zZXNpw7NuIGVuIGVsIGNvbnRleHRvIGNvbG9tYmlhbm8KCiAgICBwLm1iLTUgTGEgcmVsYWNpw7NuIGVudHJlIHBvc2VzacOzbiB5IHByb3BpZWRhZCwgcHJlc2VudGEgZGVzYWbDrW9zIHNpZ25pZmljYXRpdm9zIHF1ZSBpbXBhY3RhbiB0YW50byBhIGxvcyBpbmRpdmlkdW9zIGNvbW8gYSBsYXMgY29tdW5pZGFkZXMsIGVzcGVjaWFsbWVudGUgbGFzIG3DoXMgdnVsbmVyYWJsZXMuCgogICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIuYmctcHBhbC1henVsLnAtNC5tYi01CiAgICAgIC5jb2wtbGctYXV0by5vcmRlci0yKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMy5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAuY29sLWxnLm9yZGVyLTEubWItMwogICAgICAgIHVsLmxpc3RhLXVsLm1iLTAKICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgIGkubGlzdGEtdWxfX3ZpbmV0YQogICAgICAgICAgICBwLm1iLTAgPGI+RmFsdGEgZGUgYWNjZXNvIGEgYmVuZWZpY2lvcyBhc29jaWFkb3MgYSBsYSBwcm9waWVkYWQ6PC9iPiBsb3MgcG9zZWVkb3JlcyBubyBwdWVkZW4gYWNjZWRlciBmw6FjaWxtZW50ZSBhIGNyw6lkaXRvcyBmb3JtYWxlcyBvIHBhcnRpY2lwYXIgZW4gZWwgbWVyY2FkbyBpbm1vYmlsaWFyaW8uCiAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICBpLmxpc3RhLXVsX192aW5ldGEKICAgICAgICAgICAgcC5tYi0wIDxiPkxlbnRpdHVkIHkgYnVyb2NyYWNpYSBlbiBsYSBmb3JtYWxpemFjacOzbjogPC9iPiBsb3MgcHJvY2Vzb3MgcGFyYSBjb252ZXJ0aXIgbGEgcG9zZXNpw7NuIGVuIHByb3BpZWRhZCBtZWRpYW50ZSB1c3VjYXBpw7NuIHN1ZWxlbiBzZXIgY29tcGxlam9zLgogICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgaS5saXN0YS11bF9fdmluZXRhCiAgICAgICAgICAgIHAubWItMCA8Yj5JbXBhY3RvIGVuIGNvbXVuaWRhZGVzIHZ1bG5lcmFibGVzOiA8L2I+IGVuIHpvbmFzIHJ1cmFsZXMgeSB1cmJhbmFzLCBsYSBwb3Nlc2nDs24gZ2FyYW50aXphIHVuIG3DrW5pbW8gZGUgZXN0YWJpbGlkYWQgZWNvbsOzbWljYSB5IGhhYml0YWNpb25hbCwgcGVybyBubyBzaWVtcHJlIGN1YnJlIGxhcyBuZWNlc2lkYWRlcyBsZWdhbGVzLgogICAgICAgIAogICAgCiAgICBwLm1iLTUgTGEgcG9zZXNpw7NuIHkgbGEgcHJvcGllZGFkIHNvbiBmaWd1cmFzIGludGVyY29uZWN0YWRhcyBxdWUgcmVxdWllcmVuIGVxdWlsaWJyaW8gZW50cmUgbG9zIGludGVyZXNlcyBpbmRpdmlkdWFsZXMgeSBsYXMgbmVjZXNpZGFkZXMgY29sZWN0aXZhcy4gU2ltcGxpZmljYXIgcHJvY2Vzb3MsIGdhcmFudGl6YXIgYWNjZXNvIGEgYmVuZWZpY2lvcyB5IHByb21vdmVyIGluY2x1c2nDs24ganVyw61kaWNhLCBzb24gcGFzb3MgZXNlbmNpYWxlcyBwYXJhIGNvbnN0cnVpciB1biBzaXN0ZW1hIHF1ZSBwcm90ZWphIGRlcmVjaG9zIHBhdHJpbW9uaWFsZXMgeSBmb21lbnRlIGVsIGRlc2Fycm9sbG8gc29jaWFsIHkgZWNvbsOzbWljby4KCiAgICBoMi5tYi01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgQ8OzbW8gZnVuY2lvbmEgZW4gQ29sb21iaWEKCiAgICBwIEVuIENvbG9tYmlhLCBsb3MgY29uY2VwdG9zIGRlIHByb3BpZWRhZCB5IHBvc2VzacOzbiwgc2UgZW5jdWVudHJhbiByZWd1bGFkb3MgcGFyYSBlcXVpbGlicmFyIGxvcyBkZXJlY2hvcyBpbmRpdmlkdWFsZXMsIGNvbiBlbCBpbnRlcsOpcyBzb2NpYWwgeSBlY29sw7NnaWNvLgoKICAgCiAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4tdXAiKS5tYi0zCiAgICAgIC52aWRlbwogICAgICAgIGlmcmFtZSh3aWR0aD0iNTYwIiBoZWlnaHQ9IjMxNSIgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC84R2FHYUpGZm85cz9zaT1GMWIyTTZTbExSbkdxRmY5IiB0aXRsZT0iWW91VHViZSB2aWRlbyBwbGF5ZXIiIGZyYW1lYm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIgYWxsb3dmdWxsc2NyZWVuKQoKCiAgICBwLm1iLTUgTGEgcHJvcGllZGFkIHkgbGEgcG9zZXNpw7NuIHNvbiBjb25jZXB0b3MgZnVuZGFtZW50YWxlcyBlbiBlbCBkZXJlY2hvIGNpdmlsLCBlc3BlY2lhbG1lbnRlIGVuIENvbG9tYmlhLCBkb25kZSBsYSByZWd1bGFjacOzbiBkZSBiaWVuZXMgaW5tdWVibGVzIHRpZW5lIHVuIGltcGFjdG8gc2lnbmlmaWNhdGl2byBlbiBsYSBqdXN0aWNpYSBzb2NpYWwgeSBlbCBkZXNhcnJvbGxvIGVjb27Ds21pY28uIEEgY29udGludWFjacOzbiwgc2UgYW5hbGl6YW4gZGV0YWxsYWRhbWVudGUgc3VzIGNhcmFjdGVyw61zdGljYXMsIG1lY2FuaXNtb3MgbGVnYWxlcyB5IGVqZW1wbG9zIHByw6FjdGljb3MgcXVlIGlsdXN0cmFuIHN1IGltcG9ydGFuY2lhLgoKICAgIGgyLm1iLTUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBQcm9waWVkYWQ6IGNvbmNlcHRvLCBjYXJhY3RlcsOtc3RpY2FzIHkgbGltaXRhY2lvbmVzCgogICAgcC5tYi01IExhIHByb3BpZWRhZCwgZGVmaW5pZGEgY29tbyBlbCBkZXJlY2hvIHBsZW5vIGRlIHVzYXIsIGdvemFyIHkgZGlzcG9uZXIgZGUgdW4gYmllbiwgZXN0w6EgZ2FyYW50aXphZGEgcG9yIGVsIEFydMOtY3VsbyA1OCBkZSBsYSBDb25zdGl0dWNpw7NuIFBvbMOtdGljYSBkZSBDb2xvbWJpYS4gRXN0ZSBkZXJlY2hvIHRpZW5lIGNhcmFjdGVyw61zdGljYXMgZXNwZWPDrWZpY2FzOgoKICAgIGRpdi5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgIGRpdi5iZy1wcGFsLWF6dWwuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAudGFyamV0YQogICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KAogICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE0LnN2ZyIKICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICkKICAgICAgICAgIHAudGV4dC1jZW50ZXIudGV4dC1ib2xkIFVzbwogICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEVsIHByb3BpZXRhcmlvIHRpZW5lIGxhIGZhY3VsdGFkIGRlIGFwcm92ZWNoYXIgZWwgYmllbiBwYXJhIGZpbmVzIHBlcnNvbmFsZXMgbyBjb21lcmNpYWxlcy4KICAgICAgCiAgICAgIGRpdi5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICBkaXYuYmctcHBhbC1henVsLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwLnRhcmpldGEKICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNS5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICApCiAgICAgICAgICBwLnRleHQtY2VudGVyLnRleHQtYm9sZCBHb2NlCiAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgUHVlZGUgcmVjaWJpciBsb3MgYmVuZWZpY2lvcyBlY29uw7NtaWNvcyBkZWwgYmllbiwgY29tbyBsYXMgcmVudGFzIGdlbmVyYWRhcyBwb3IgdW4gaW5tdWVibGUuCiAgICAgIAogICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgZGl2LmJnLXBwYWwtYXp1bC5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMC50YXJqZXRhCiAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTYuc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgKQogICAgICAgICAgcC50ZXh0LWNlbnRlci50ZXh0LWJvbGQgRGlzcG9zaWNpw7NuCiAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgUGVybWl0ZSBlbmFqZW5hciBlbCBiaWVuLCB5YSBzZWEgcG9yIHZlbnRhLCBkb25hY2nDs24gbyBzdWNlc2nDs24uCiAgICAKICAgIGgyLm1iLTUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBQb3Nlc2nDs246IGNvbmNlcHRvLCBjYXJhY3RlcsOtc3RpY2FzIHkgbWVjYW5pc21vcyBsZWdhbGVzCgogICAgLnJvdy5tYi01Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgLmNvbC1sZy0xMChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgcCBMYSBwb3Nlc2nDs24gZXMgdW5hIGZpZ3VyYSBqdXLDrWRpY2EgcXVlIHNlIHJlZmllcmUgYWwgY29udHJvbCBkZSBoZWNobyBzb2JyZSB1biBiaWVuLCBjb24gbyBzaW4gdMOtdHVsbyBmb3JtYWwuIFNlZ8O6biBlbCBBcnTDrWN1bG8gNzYyIGRlbCBDw7NkaWdvIENpdmlsLCBlcyBsYSB0ZW5lbmNpYSBkZSB1bmEgY29zYSBjb24gw6FuaW1vIGRlIHNlw7FvciB5IGR1ZcOxby4gQXVucXVlIG5vIGNvbmZpZXJlIHRpdHVsYXJpZGFkIGlubWVkaWF0YSwgbGEgcG9zZXNpw7NuIHB1ZWRlIHRyYW5zZm9ybWFyc2UgZW4gcHJvcGllZGFkIG1lZGlhbnRlIGxhIHByZXNjcmlwY2nDs24gYWRxdWlzaXRpdmEsIHF1ZSByZWNvbm9jZSBkZXJlY2hvcyBhIHF1aWVuZXMgcG9zZWVuIHVuIGJpZW4gZGUgZm9ybWEgcGFjw61maWNhLCBjb250aW51YSB5IHDDumJsaWNhIGR1cmFudGUgdW4gcGVyaW9kbyBlc3RhYmxlY2lkby4KICAgICAgICBwIExvcyB0aXBvcyBkZSBwcmVzY3JpcGNpw7NuIGFkcXVpc2l0aXZhIHNvbjoKICAgICAgLmNvbC1tZC04LmNvbC1sZy0yKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIGZpZ3VyZQogICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNy5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAoKICAgIFRhYnNDLmNvbG9yLXByaW1hcmlvLm1iLTUKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89Ik9yZGluYXJpYSIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy00LnN2ZycpIiApCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgT3JkaW5hcmlhCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLm1iLTAKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5saXN0YS11bF9fdmluZXRhCiAgICAgICAgICAgICAgICB8IFJlcXVpZXJlIHTDrXR1bG8ganVzdG8geSBidWVuYSBmZS4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5saXN0YS11bF9fdmluZXRhCiAgICAgICAgICAgICAgICB8IFBsYXpvIG3DrW5pbW86IDUgYcOxb3MuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkubGlzdGEtdWxfX3ZpbmV0YQogICAgICAgICAgICAgICAgcCA8Yj5FamVtcGxvOjwvYj4gdW4gYWdyaWN1bHRvciBxdWUgY29tcHLDsyB1biB0ZXJyZW5vIG1lZGlhbnRlIHVuIGNvbnRyYXRvIGluZm9ybWFsIHkgbG8gaGEgdHJhYmFqYWRvIGR1cmFudGUgY2luY28gYcOxb3MsIHB1ZWRlIHNvbGljaXRhciBlbCByZWNvbm9jaW1pZW50byBsZWdhbCBkZSBzdSBwcm9waWVkYWQuCiAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQub3JkZXItMS5tYi0zCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMTgucG5nJywgYWx0PScnKQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iRXh0cmFvcmRpbmFyaWEiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtNC5zdmcnKSIgKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEV4dHJhb3JkaW5hcmlhCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLm1iLTAKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5saXN0YS11bF9fdmluZXRhCiAgICAgICAgICAgICAgICB8IE5vIGV4aWdlIHTDrXR1bG8gbmkgYnVlbmEgZmUuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkubGlzdGEtdWxfX3ZpbmV0YQogICAgICAgICAgICAgICAgfCBQbGF6byBtw61uaW1vOiAxMCBhw7Fvcy4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5saXN0YS11bF9fdmluZXRhCiAgICAgICAgICAgICAgICBwIDxiPkVqZW1wbG86PC9iPiB1bmEgZmFtaWxpYSBxdWUgb2N1cMOzIHVuYSBwYXJjZWxhIGFiYW5kb25hZGEgeSBsYSBjdWx0aXbDsyBwb3IgbcOhcyBkZSAxMCBhw7FvcywgcHVlZGUgYWRxdWlyaXIgbGEgcHJvcGllZGFkIGxlZ2FsbWVudGUsIG1lZGlhbnRlIGVzdGUgbWVjYW5pc21vLgogICAgICAgIAogICAgICAgIAogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEubWItMwogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzE5LnBuZycsIGFsdD0nJykKICAgIAogICAgcC5tYi01IEF1bnF1ZSBsYSBwcm9waWVkYWQgeSBsYSBwb3Nlc2nDs24gc29uIGZpZ3VyYXMgZGlzdGludGFzLCBzdSBpbnRlcmNvbmV4acOzbiBlcyBldmlkZW50ZSBlbiBtw7psdGlwbGVzIGNvbnRleHRvczoKCgogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBUYWJsYSAyLiAKICAgICAgc3BhbiBSZWxhY2nDs24gZW50cmUgcHJvcGllZGFkIHkgcG9zZXNpw7NuCgogICAgLnRhYmxhLWEuY29sb3ItdGVyY2lhcmlvLm1iLTUoZGF0YS1hb3M9Inpvb20taW4iKSAKICAgICAgdGFibGUKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGguYmctY29sb3ItNCBBc3BlY3RvCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTQgUHJvcGllZGFkCiAgICAgICAgICAgIHRoLmJnLWNvbG9yLTQgUG9zZXNpw7NuCiAgICAgICAgdGJvZHkKICAgICAgICAgIHRyLmJnLWNvbG9yLTUKICAgICAgICAgICAgdGQgPGI+RGVmaW5pY2nDs248L2I+CiAgICAgICAgICAgIHRkIERlcmVjaG8gcGxlbm8gcXVlIG90b3JnYSB1c28sIGdvY2UgeSBkaXNwb3NpY2nDs24gZGVsIGJpZW4uCiAgICAgICAgICAgIHRkIFJlbGFjacOzbiBkZSBoZWNobyBzb2JyZSB1biBiaWVuLCBjb24gbyBzaW4gdMOtdHVsbyBmb3JtYWwuCiAgICAgICAgICAgIAogICAgICAgICAgdHIuYmctY29sb3ItNQogICAgICAgICAgICB0ZCA8Yj5Qcm90ZWNjacOzbiBqdXLDrWRpY2E8L2I+IAogICAgICAgICAgICB0ZCBSZWd1bGFkYSBwb3IgZWwgQXJ0w61jdWxvIDU4IGRlIGxhIENvbnN0aXR1Y2nDs24uIEVzIG9wb25pYmxlIGEgdGVyY2Vyb3MuCiAgICAgICAgICAgIHRkIFJlZ3VsYWRhIHBvciBlbCBBcnTDrWN1bG8gNzYyIGRlbCBDw7NkaWdvIENpdmlsLiBQZXJtaXRlIGxhIGRlZmVuc2EgZGUgbGEgdGVuZW5jaWEgZnJlbnRlIGEgaW50ZXJmZXJlbmNpYXMuCiAgICAgICAgICAgCiAgICAgICAgICB0ci5iZy1jb2xvci01CiAgICAgICAgICAgIHRkIDxiPkxpbWl0YWNpb25lczwvYj4KICAgICAgICAgICAgdGQgRXhwcm9waWFjacOzbiBwb3IgdXRpbGlkYWQgcMO6YmxpY2EgbyBpbnRlcsOpcyBzb2NpYWwsIGNvbiBpbmRlbW5pemFjacOzbi4KICAgICAgICAgICAgdGQgTm8gY29uZmllcmUgdGl0dWxhcmlkYWQgbGVnYWwgaW5tZWRpYXRhOyByZXF1aWVyZSBwcmVzY3JpcGNpw7NuIGFkcXVpc2l0aXZhIHBhcmEgY29udmVydGlyc2UgZW4gcHJvcGllZGFkLgogICAgICAgICAgICAgCiAgICAgICAgICB0ci5iZy1jb2xvci01CiAgICAgICAgICAgIHRkIDxiPkZ1bmNpw7NuIHNvY2lhbDwvYj4gCiAgICAgICAgICAgIHRkIEdhcmFudGl6YSBlbCB1c28gZGVsIGJpZW4gZW4gYmVuZWZpY2lvIGRlbCBjb2xlY3Rpdm8gKGZ1bmNpw7NuIGVjb2zDs2dpY2EgeSBzb2NpYWwpLgogICAgICAgICAgICB0ZCBGYWNpbGl0YSBlbCBhY2Nlc28gYSB0aWVycmFzIG8gYmllbmVzIGVuIGNvbnRleHRvcyBkZSBpbmZvcm1hbGlkYWQsIGZvbWVudGFuZG8gaW5jbHVzacOzbiBzb2NpYWwuCgogICAgaDIubWItNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEFwbGljYWNpb25lcyBwcsOhY3RpY2FzCgogICAgcC5tYi01IEEgY29udGludWFjacOzbiwgc2UgYW5hbGl6YW4gZXN0YXMgcmVndWxhY2lvbmVzIGNvbiBlamVtcGxvcyBwcsOhY3RpY29zIHF1ZSBpbHVzdHJhbiBzdSBhcGxpY2FjacOzbi4KCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLW1kLTguY29sLWxnLTQub3JkZXItMihkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yMC5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IlJlc3RpdHVjacOzbiBkZSB0aWVycmFzIHBhcmEgdsOtY3RpbWFzIGRlbCBjb25mbGljdG8gYXJtYWRvIikKICAgICAgICAgICAgcCBMYSBMZXkgMTQ0OCBkZWwgMjAxMSwgcGVybWl0ZSBhIGxhcyB2w61jdGltYXMgZGVsIGRlc3BsYXphbWllbnRvIGZvcnphZG8sIHJlY3VwZXJhciBwcmVkaW9zIHF1ZSBwb3Nlw61hbiBvIGRlIGxvcyBxdWUgZXJhbiBwcm9waWV0YXJpb3MgYW50ZXMgZGVsIGRlc3Bvam8uIAogICAgICAgICAgICBwIDxiPkVqZW1wbG86PC9iPiB1bmEgZmFtaWxpYSBkZXNwbGF6YWRhIGRlIHN1IGZpbmNhIGR1cmFudGUgbGEgdmlvbGVuY2lhLCBwdWVkZSByZWN1cGVyYXJsYSBtZWRpYW50ZSBwcnVlYmFzIHRlc3RpbW9uaWFsZXMgbyBkb2N1bWVudGFsZXMsIGluY2x1c28gc2luIHVuIHTDrXR1bG8gZm9ybWFsLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJGb3JtYWxpemFjacOzbiBkZSBwcmVkaW9zIG9jdXBhZG9zIGluZm9ybWFsbWVudGUiKQogICAgICAgICAgICBwIExhIExleSAxNTYxIGRlbCAyMDEyLCBmYWNpbGl0YSBsYSBvYnRlbmNpw7NuIGRlIHTDrXR1bG9zIGRlIHByb3BpZWRhZCBwYXJhIHBlcnNvbmFzIHF1ZSBoYW4gb2N1cGFkbyB0ZXJyZW5vcyBkZSBtYW5lcmEgaW5mb3JtYWwuIEVzdGUgcHJvY2VzbyBwZXJtaXRlIGFjY2VkZXIgYSBzZXJ2aWNpb3MgcMO6YmxpY29zIHkgY3LDqWRpdG9zIGhpcG90ZWNhcmlvcy4gCiAgICAgICAgICAgIHAgPGI+RWplbXBsbzo8L2I+IHVuIHJlc2lkZW50ZSBkZSB1biBiYXJyaW8gcG9wdWxhciBlbiBCb2dvdMOhLCBsZWdhbGl6YSBzdSB2aXZpZW5kYSB0cmFzIGRlbW9zdHJhciBvY3VwYWNpw7NuIGNvbnRpbnVhIGR1cmFudGUgbcOhcyBkZSAxMCBhw7Fvcy4KICAgICAgICAgIC5kaXYodGl0dWxvPSJPcmRlbmFtaWVudG8gdGVycml0b3JpYWwgeSB1c28gZGVsIHN1ZWxvIikKICAgICAgICAgICAgcCBFbCBEZWNyZXRvIDEwNzcgZGVsIDIwMTUsIGVzdGFibGVjZSBxdWUgbG9zIHByb3BpZXRhcmlvcyBkZWJlbiBjdW1wbGlyIGNvbiBsYXMgZGlzcG9zaWNpb25lcyBsb2NhbGVzIGRlIG9yZGVuYW1pZW50byB0ZXJyaXRvcmlhbCwgcHJvbW92aWVuZG8gdW4gZGVzYXJyb2xsbyBzb3N0ZW5pYmxlIHkgcGxhbmlmaWNhZG8uIAogICAgICAgICAgICBwIDxiPkVqZW1wbG86PC9iPiB1biBwcm9waWV0YXJpbyBkZSB1biB0ZXJyZW5vIHJ1cmFsLCBuZWNlc2l0YSBwZXJtaXNvcyBlc3BlY8OtZmljb3MgcGFyYSB1cmJhbml6YXJsbywgcmVzcGV0YW5kbyDDoXJlYXMgcHJvdGVnaWRhcyB5IG5vcm1hdGl2YXMgYW1iaWVudGFsZXMuCgogICAgCgoKCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy80MDE5MyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBDYW1wb3MgTG96YWRhLCBNLiAoMjAxNykuIEJpZW5lcyB5IGRlcmVjaG9zIHJlYWxlcy4gSVVSRSBFZGl0b3Jlcy4gCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vcmVkLnVleHRlcm5hZG8uZWR1LmNvL3dwLWNvbnRlbnQvdXBsb2Fkcy9zaXRlcy80OC8yMDIxLzA3L1VTVUZSVUNUTy1VU08tWS1IQUJJVEFDSU9OLS5wZGYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBWYXJnYXMsIEEuIFIuIEVMIFVTVUZSVUNUTywgVVNPIFkgSEFCSVRBQ0nDk04gRU4gQ09MT01CSUEuIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy50aG9tc29ucmV1dGVycy5jbC9lcy1jbC9wcm9kdWN0b3MvaW5mb3JtYWNpb24tbGVnYWwtd2VzdGxhdyAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBQbGF0YWZvcm1hIHNvYnJlIGdlc3Rpw7NuIGLDoXNpY2EgZGVsIGRlcmVjaG8KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWVlQ2FrUGdUckEwIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgQXByZW5kZXIuICgyMDIwKS4gREVSRUNIT1MgUkVBTEVTOiBJbnRyb2R1Y2Npw7NuIHkgY29uY2VwdG8uIAoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQogICAgCiAgICAKCg=="},null]}