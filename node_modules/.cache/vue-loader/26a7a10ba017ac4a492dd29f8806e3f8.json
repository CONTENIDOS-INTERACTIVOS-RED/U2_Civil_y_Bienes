{"remainingRequest":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/src/views/curso/Tema2.vue?vue&type=template&id=4afe1486&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/src/views/curso/Tema2.vue","mtime":1756050436200},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Civil_y_Bienes/U2_Civil_y_Bienes/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}